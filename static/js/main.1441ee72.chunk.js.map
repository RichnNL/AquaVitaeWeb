{"version":3,"sources":["state/stores/Theme/ThemeStore.ts","state/context/ThemeContext.tsx","state/providers/ThemeProvider.tsx","styles/theme/colors.ts","styles/theme/theme.tsx","styles/theme/media.ts","styles/StyledButton.tsx","components/Button/AVButton.tsx","constants/pathData.ts","constants/storageKey.ts","state/stores/Authentication/AuthenticationStore.tsx","state/context/AuthenticationContext.tsx","constants/errorCode.ts","services/Firebase/Firebase.ts","state/providers/AuthenticationProvider.tsx","state/hooks/AuthenticationHook.tsx","state/hooks/ThemeHook.tsx","constants/languageData.ts","state/stores/Language/LanguageStore.tsx","state/context/LanguageContext.tsx","state/providers/LanguageProvider.tsx","state/hooks/LanguageHook.tsx","pages/Home/HomePage.tsx","pages/Landing/LandingPage.tsx","components/AuthenticatedRoute/AuthenticatedRoute.tsx","pages/MainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ThemeStore","theme","layout","toggleTheme","this","toggleLayout","createThemeStore","ThemeContext","React","createContext","ThemeToggleProvider","children","themeStore","useLocalStore","Provider","value","ThemeToggleWrapper","useContext","Error","useObserver","Colors","primary","default","light","dark","secondary","text","accent","backgroundColor","variants","backgroundColorHover","backgroundColorshadow","borderColor","textColor","headerFont","buttonFontSize","small","compact","cozy","medium","large","Sizes","desktop","tablet","mobile","Object","keys","reduce","acc","label","any","css","StyledButton","styledComponentsTS","styledComponents","button","Theme","AVButton","props","type","btnSize","onClick","title","defaultProps","PATH","Landing","Home","STORAGEKEY","AuthenticationStore","authentication","setAuthenticationFromPreviousSession","facebookSignIn","result","runInAction","loggedIn","picture","getPictureURL","userName","getDisplayName","googleSignIn","logOut","localStorage","removeItem","isLoggedIn","then","observable","action","AuthenticationContext","ERRORCODE","signIn","isCanceled","code","message","noAccessToken","loginFailed","config","apiKey","process","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGEBUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGINGSENDER_ID","app","initializeApp","auth","setPersistence","Auth","Persistence","LOCAL","googleProvider","GoogleAuthProvider","signInWithPopup","signedInUser","additionalUserInfo","isNewUser","console","log","catch","error","facebookProvider","FacebookAuthProvider","Promise","resolve","onAuthStateChanged","user","currentUser","name","displayName","email","url","photoURL","signOut","AuthenticationProvider","authenticationStore","Firebase","useAuthenticationStore","context","useThemeStore","LanguageData","test","SuppportedLanguages","initial","full","LanguageStore","currentLang","textData","switchLang","languageName","index","findIndex","l","setItem","setLocalLang","localLanguage","getItem","navigator","language","length","replace","find","lang","getSupportedLangs","createLanguageStore","LanguageContext","LanguageProvider","languageStore","useLanguageStore","HomePage","themeTest1","themeTest2","languageTest1","authenticationTest1","logInFacebook","authenticationTest2","logInGoogle","authenticationTest3","to","String","LandingPage","AuthenticatedRoute","path","authStore","p","pathname","MainPage","history","useHistory","useEffect","push","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1441ee72.chunk.js","sourcesContent":["export interface IThemeStore {\n    theme: string;\n    layout: string;\n    toggleTheme(): any;\n    toggleLayout(): any; \n}\n\nconst ThemeStore: IThemeStore = {\n  theme: \"light\",\n  layout: \"cozy\",\n  toggleTheme() {\n    if(this.theme === \"light\") {\n        this.theme = \"dark\"\n    } else {\n        this.theme = \"light\"\n    }\n  },\n  toggleLayout() {\n    if(this.layout === \"cozy\") {\n        this.layout = \"compact\"\n    } else {\n        this.layout = \"cozy\"\n    }\n  }\n\n}\nconst createThemeStore = () => {\n  const store = {\n    ...ThemeStore\n  };\n\n  return store;\n};\n\nexport default createThemeStore;\nexport type ThemeStoreType = ReturnType<typeof createThemeStore>;\n\n","import React from 'react';\nimport { IThemeStore } from '../stores/Theme/ThemeStore';\n\nconst ThemeContext = React.createContext<IThemeStore | null>(null);\nexport default ThemeContext;","import React from 'react';\nimport createThemeStore from '../stores/Theme/ThemeStore';\nimport { useLocalStore, useObserver } from 'mobx-react';\nimport { ThemeProvider } from 'styled-components';\nimport ThemeContext from '../context/ThemeContext';\n\nexport interface IThemeProvider {\n  children?: React.ReactNode | any; \n }\n\n\n\nexport const ThemeToggleProvider: React.FC<IThemeProvider> = ({children}) => { \n  const themeStore = useLocalStore(createThemeStore);\n  \n  return  (\n    <ThemeContext.Provider value={themeStore}>\n        <ThemeToggleWrapper>\n          {children}\n        </ThemeToggleWrapper>\n    </ThemeContext.Provider>\n  \n  )\n}\n\nconst ThemeToggleWrapper: React.FC<IThemeProvider> = ({children}) => { \n  const themeStore = React.useContext(ThemeContext);\n  if (!themeStore) throw Error(\"Store shouldn't be null\");\n\n  return useObserver(() => {   \n     return <ThemeProvider theme={{theme: themeStore.theme, layout: themeStore.layout}}  >\n              {children}\n            </ThemeProvider>  \n    });\n}\n\nexport default ThemeToggleProvider;","export interface IColorsInterface {\n    default: string;\n    light: string;\n    dark: string;\n    \n}\n\nexport interface IColorOptionsInterface {\n    primary: IColorsInterface;\n    secondary: IColorsInterface;\n    text: IColorsInterface;\n    accent: IColorsInterface;\n    light: IColorsInterface;\n    dark: IColorsInterface;\n}\n\nexport const Colors: IColorOptionsInterface =  {\n    primary: {\n        default: '#2274A5',\n        light: '#2a91ce',\n        dark: '#124e78'\n    },\n    secondary: {\n        default: '#e38200',\n        light: '#ff9e1d',\n        dark: '#b66800'\n    },\n    text: {\n        default: '#1d3a50',\n        light: '#dee6f0',\n        dark: '#11181e'\n    },\n    accent: { \n        default: '#554bc6',\n        light: '#867fd6',\n        dark: '#3e35a6'\n    },\n    light: {\n        default: '#e9edf6',\n        light: '#ffffff',\n        dark: '#f0f0f0'\n    },\n    dark: {\n        default: '#95989b',\n        light: '#bcbec0',\n        dark: '#767a7d'\n    }\n};\n\nexport default {Colors};\n\n   \n  \n    \n\n\n\n","import theme from 'styled-theming';\nimport {Colors} from './colors';\nimport * as React from 'react';\n\n\n\nexport const backgroundColor = theme.variants('theme', 'type', {\n    primary: {light: Colors.primary.default,  dark: Colors.primary.dark },\n    secondary: {light: Colors.primary.light, dark: Colors.secondary.dark}\n  });\n\nexport const backgroundColorHover = theme.variants('theme', 'type', {\n    primary: {light: Colors.secondary.default,  dark: Colors.primary.dark },\n    secondary: {light: Colors.primary.dark,  dark: Colors.secondary.dark }\n  });\n  \nexport const backgroundColorshadow = theme.variants('theme', 'type', {\n  primary: {light: Colors.secondary.light, dark: Colors.primary.dark },\n  secondary: {light: Colors.primary.dark,  dark: Colors.secondary.dark }\n});\n\nexport const borderColor = theme.variants('theme', 'type', {\n  primary: {light: Colors.secondary.default, dark: Colors.primary.dark },\n  secondary: {light: Colors.primary.light, dark: Colors.primary.dark }\n});\n  \nexport const textColor = theme.variants('theme', 'type', {\n  primary: {light: Colors.text.default },\n  secondary: {light: Colors.text.light }\n});\n\nexport const headerFont = theme.variants('theme', 'type', {\n  primary: {light: 'Celtic' },\n  secondary: {light: Colors.text.light }\n});\n\nexport const textFont = theme.variants('theme', 'type', {\n  primary: {light: 'OpenSans' },\n  secondary: {light: 'OpenSans' }\n});\n\nexport const textItalicFont = theme.variants('theme', 'type', {\n  primary: {light: 'OpenSans_Italic' },\n  secondary: {light: 'OpenSans_Italic' }\n});\n\nexport const textBoldFont = theme.variants('theme', 'type', {\n  primary: {light: 'OpenSans_Bold' },\n  secondary: {light: 'OpenSans_Bold' }\n});\n\nexport const textLightFont = theme.variants('theme', 'type', {\n  primary: {light: 'OpenSans_Light' },\n  secondary: {light: 'OpenSans_Light' }\n});\n\nexport const buttonFontSize = theme.variants('layout', 'btnSize', {\n  small: { compact: '10px', cozy: '15px' },\n  medium: { compact: '20px', cozy: '25px' },\n  large: { compact: '30px', cozy: '35px' },\n});\n\nexport const buttonPadding = theme.variants('layout', 'btnSize', {\n  small: { compact: '15px 50px;', cozy: '20px 60px;' },\n  medium: { compact: '24px 76px;', cozy: '30px 85px;' },\n  large: { compact: '35px 90px;', cozy: '40px 100px;' },\n});\n\nexport interface ITheme {\n children?: React.ReactNode | any; \n}\n\n\n\n\n\n\n ","import {css} from 'styled-components';\n\nexport interface ISizes  {\n      desktop: number;\n      tablet: number;\n      mobile: number;\n  }\n\nexport const Sizes: ISizes = {\n    desktop: 992,\n    tablet: 768,\n    mobile: 576\n  }\n\nexport interface IMedia {\n    desktop?: any;\n    tablet?: any;\n    mobile?: any;\n}  \nexport const media: IMedia = \n  Object\n    .keys(Sizes)\n    .reduce((acc, label) => {\n       acc[label] = (any) => css`\n        @media (max-width: ${Sizes[label] / 16}em) {\n         ${css(any)}\n        }\n       `\n return acc\n }, {});\n","import * as Theme from './theme/theme';\nimport {Sizes} from './theme/media';\nimport styledComponentsTS from 'styled-components-ts';\nimport styledComponents from 'styled-components';\n\nexport interface IStyledButton extends Theme.ITheme {\n  type?: 'primary' | 'secondary';\n  btnSize?: 'small' | 'medium' | 'large';\n}\n\nconst StyledButton = styledComponentsTS<IStyledButton>(styledComponents.button)`\nbackground-color: ${Theme.backgroundColor};\n-webkit-border-radius: 20px;\n-moz-border-radius: 20px;\nborder-radius: 20px;\ncolor: ${Theme.textColor};\nfont-family: ${Theme.headerFont}  ;\nfont-size: ${Theme.buttonFontSize};\nfont-weight: 100;\npadding:24px 76px;\nbox-shadow: 1px 1px 20px 0px #000000;\n-webkit-box-shadow: 1px 1px 20px 0px #000000;\n-moz-box-shadow: 1px 1px 20px 0px #000000;\ntext-shadow: 1px 1px 20px #000000;\nborder: solid ${Theme.borderColor} 1px;\ntext-decoration: none;\ndisplay: inline-block;\ncursor: pointer;\n@media screen and (max-width: ${Sizes.desktop}px) {\n    background-color: ${Theme.backgroundColor};\n};\n@media screen and (max-width: ${Sizes.tablet}px) {\n  background-color: ${Theme.backgroundColorHover};\n};\n@media screen and (max-width: ${Sizes.mobile}px) {\n  background-color: ${Theme.backgroundColorshadow};\n};\n\n&:hover  {\n  background-color: ${Theme.backgroundColorHover};\n}\n\n`;\n\nexport default StyledButton;\n\n\n  \n \n","import React from 'react';\nimport StyledButton, {IStyledButton} from '../../styles/StyledButton';\nimport { useObserver } from 'mobx-react';\n\ninterface Props extends IStyledButton {\n  onClick: ()=> void,\n  title: string,\n}\n\n\n\nexport const  AVButton: React.FC<Props> = (props) => { \n \n  return useObserver(() => {   \n     return <StyledButton  type={props.type} btnSize={props.btnSize} \n     onClick={props.onClick}>\n    \n      {props.title} </StyledButton>\n      \n\n    });\n  \n  }\n\n  AVButton.defaultProps = {\n    type: 'primary',\n    btnSize: 'medium'\n  };","export const PATH: IPath = {\n    Landing: '/',\n    Home: '/Home'\n}\n\nexport interface IPath {\n    Landing: string;\n    Home: string;\n}\n\nexport default PATH;","export const STORAGEKEY: IStorageKey = {\n    loginMethodKey: 'loginMethod',\n    languageKey: 'appLang'\n}\n\nexport interface IStorageKey {\n    loginMethodKey: string,\n    languageKey: string\n}","import { observable, runInAction, action } from 'mobx';\nimport {STORAGEKEY} from '../../../constants/storageKey';\n\n\n\nexport interface IAuthenticationStore {\n    loggedIn: boolean;\n    userName: string;\n    logInFacebook(): Promise<number>;\n    logInGoogle(): Promise<number>;\n    logOut(): Promise<boolean>;\n    picture: string;\n}\n\nexport interface IAuthentication {\n  googleSignIn(): Promise<number>;\n  facebookSignIn(): Promise<number>;\n  isLoggedIn(): Promise<boolean>;\n  getDisplayName(): string;\n  getEmail(): string;\n  getPictureURL(): string;\n  logOut(): Promise<boolean>;\n}\n\nclass AuthenticationStore implements IAuthenticationStore  {\n  authentication: IAuthentication;\n  constructor(authentication: IAuthentication) {\n    this.authentication = authentication;\n    this.setAuthenticationFromPreviousSession();\n  }\n\n  @observable\n  picture = \"\";\n\n  \n  @observable\n  loggedIn = false;\n\n  @observable\n  userName = \"\";\n\n  @action\n  async logInFacebook() {\n    try{\n      const result = await  this.authentication.facebookSignIn();\n      if(result === 1) {\n        runInAction(() => {\n          this.loggedIn = true;\n          this.picture = this.authentication.getPictureURL();\n          this.userName = this.authentication.getDisplayName();\n        });\n      } \n      return result;\n    } catch(Error) {\n      return 0;\n    }\n  }\n\n  @action\n  async logInGoogle() {\n    try{\n      const result = await this.authentication.googleSignIn();\n      if(result === 1) {\n        runInAction(() => {\n          this.loggedIn = true;\n          this.picture = this.authentication.getPictureURL();\n          this.userName = this.authentication.getDisplayName();\n        });\n      }\n       \n      return result;\n    } catch(Error) {\n      return 0;\n    }\n  }\n\n  @action\n  async logOut() {\n    try {\n      const result = await this.authentication.logOut();\n      if(result) {\n        runInAction(() => {\n          this.loggedIn = false;\n          this.picture = '';\n          this.userName = '';\n          localStorage.removeItem(STORAGEKEY.loginMethodKey);\n        });\n      }\n      return result;\n    } catch(Error) {\n      return false;;\n    }\n  }\n\n  async setAuthenticationFromPreviousSession() {\n     await this.authentication.isLoggedIn().then(isLoggedIn => {\n      this.loggedIn = isLoggedIn;\n      if(this.loggedIn) {\n        this.userName = this.authentication.getDisplayName();\n        this.picture = this.authentication.getPictureURL();\n      }\n    })\n  }\n}\n\n\nexport default AuthenticationStore;\n","import React from 'react';\nimport {IAuthenticationStore} from '../stores/Authentication/AuthenticationStore';\n\nconst AuthenticationContext = React.createContext<IAuthenticationStore | null>(null);\nexport default AuthenticationContext;","const ERRORCODE = {\n    signIn: {\n        isCanceled: {\n           code: -10,\n           message: 'User canceled sign in process' \n        },\n        noAccessToken: {\n            code: -20,\n            message: 'Failed to acquire access token' \n         },\n         loginFailed: {\n            code: 0,\n            message: 'Login failed' \n         },\n    }\n}\n\nexport default ERRORCODE;","import app from 'firebase/app';\nimport 'firebase/auth';\nimport {IAuthentication} from '../../state/stores/Authentication/AuthenticationStore';\nimport ERRORCODE from '../../constants/errorCode';\n\nconst config = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGEBUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGINGSENDER_ID,\n  };\n\n\n class Firebase implements IAuthentication {\n        constructor() {\n            app.initializeApp(config);\n            app.auth().setPersistence(app.auth.Auth.Persistence.LOCAL);\n        }\n        async googleSignIn(): Promise<number> {\n           const googleProvider =  new app.auth.GoogleAuthProvider();\n           return app.auth().signInWithPopup(googleProvider).then(signedInUser => {\n            const user = signedInUser.additionalUserInfo!;\n            if(user.isNewUser){\n              console.log(\"Is new user\");\n            } else {\n              console.log(\"Not new user\");\n            }\n            return 1;\n        }).catch(error => {\n            return ERRORCODE.signIn.loginFailed.code;\n        });\n        }\n        async facebookSignIn(): Promise<number> {\n            const facebookProvider   = new app.auth.FacebookAuthProvider();\n            return app.auth().signInWithPopup(facebookProvider).then(signedInUser => {\n                const user = signedInUser.additionalUserInfo!;\n                if(user.isNewUser){\n                  console.log(\"Is new user\");\n                } else {\n                  console.log(\"Not new user\");\n                }\n                return 1;\n            }).catch(error => {\n                return ERRORCODE.signIn.loginFailed.code;\n            });\n        }\n        isLoggedIn(): Promise<boolean> {\n            return new Promise<boolean>( resolve => {\n      \n                app.auth().onAuthStateChanged(( user => {\n                    if(user) {\n                        resolve(true)\n                    } else {\n                        resolve(false);\n                    }\n                }))\n            })   \n        }\n        getDisplayName(): string {\n            if(app.auth().currentUser) {\n                const name = app.auth().currentUser!.displayName;\n                if(name) {\n                    return name;\n                } else {\n                    return \"\";\n                }\n            }\n            return \"\";\n        }\n        getEmail(): string {\n            if(app.auth().currentUser) {\n                const email = app.auth().currentUser!.email;\n                if(email) {\n                    return email;\n                } else {\n                    return \"\";\n                }\n            }\n            return \"\";\n        }\n        getPictureURL(): string {\n            if(app.auth().currentUser) {\n                const url = app.auth().currentUser!.photoURL;\n                if(url){\n                    return url;\n                } else {\n                    return \"\";\n                }\n            }\n            return \"\";   \n        }\n        logOut(): Promise<boolean> {\n           return app.auth().signOut().then( ()=> {\n                return true;\n            }).catch( ()=> {\n                return false;\n            });\n        }\n }\n\n export default new Firebase();","import React from 'react';\nimport  AuthenticationStore  from '../stores/Authentication/AuthenticationStore';\nimport AuthenticationContext from '../context/AuthenticationContext';\nimport  Firebase  from \"../../services/Firebase/Firebase\";\n\n\n\nexport interface IAuthenticationProvider {\n  children?: React.ReactNode | any; \n}\n\nexport const AuthenticationProvider: React.FC<IAuthenticationProvider> = ({children}) => { \n  const authenticationStore = new AuthenticationStore(Firebase);\n  authenticationStore.setAuthenticationFromPreviousSession();\n  return  (\n    <AuthenticationContext.Provider value={authenticationStore}>\n          {children}\n    </AuthenticationContext.Provider>\n  \n  )\n}\n\nexport default AuthenticationProvider;","import React from 'react';\nimport AuthenticationContext from '../context/AuthenticationContext';\n\nconst useAuthenticationStore = () => {\n    const context = React.useContext(AuthenticationContext);\n     if(!context) {\n       throw Error(\"Cannot be null\");\n     } else {\n       return context;\n     }\n   }\n\nexport default useAuthenticationStore;","import React from 'react';\nimport ThemeContext from '../context/ThemeContext';\n\nconst useThemeStore = () => {\n    const context = React.useContext(ThemeContext);\n     if(!context) {\n       throw Error(\"Cannot be null\");\n     } else {\n       return context;\n     }\n   }\n\n   export default useThemeStore;","\nexport const LanguageData: LanguageOptionsType = {\n    'en-US': {\n        test: {\n            test: 'Hello World'\n        }\n    },\n    'es-ES': {\n        test: {\n            test: 'Hola Mundo'\n        }\n    },\n    'nl-NL': {\n        test: {\n            test: 'Hallo Werld'\n        }\n    }\n}\n\nexport type LanguageDataType = {\n    test: {\n        test: string;\n    }\n}\n\n\n\nexport type LanguageOptionsType = {\n    'en-US': LanguageDataType,\n    'es-ES': LanguageDataType,\n    'nl-NL': LanguageDataType\n}\n\n\n\n\n\n\nexport type SuppportedLanguagesIntialsType = englishInitial | espanolInitial  | nederlandsInitial;\nexport type SuppportedLanguagesFullNameType = english | espanol | nederlands; \n\n\nexport type LanguageType = {\n    initial: SuppportedLanguagesIntialsType;\n    full: SuppportedLanguagesFullNameType;\n}\n\ntype englishInitial =  'en-US';\ntype espanolInitial =  'es-ES';\ntype nederlandsInitial = 'nl-NL';\ntype english = 'english';\ntype espanol = 'espanol';\ntype nederlands = 'nederlands';\n\nconst englishLang: LanguageType = {\n    initial: 'en-US',\n    full: 'english'\n}\nconst espanolLang: LanguageType = {\n    initial: 'es-ES',\n    full: 'espanol'\n}\n\nconst nederlandsLang: LanguageType = {\n    initial: 'nl-NL',\n    full: 'nederlands'    \n}\n\nexport const SuppportedLanguages: LanguageType[] = [englishLang, espanolLang, nederlandsLang];","import {LanguageDataType, \n        SuppportedLanguagesIntialsType, \n        SuppportedLanguages,\n        LanguageData,\n        LanguageType,\n        SuppportedLanguagesFullNameType} from '../../../constants/languageData';\nimport {STORAGEKEY} from '../../../constants/storageKey';\n\n\n\nexport interface ILanguageStore {\n    currentLang:  SuppportedLanguagesIntialsType;\n    textData: LanguageDataType ;\n    switchLang(languageName: SuppportedLanguagesIntialsType | SuppportedLanguagesFullNameType): any;\n    setLocalLang(): any;\n    getSupportedLangs(): LanguageType[];\n}\n\nconst LanguageStore: ILanguageStore = {\n  currentLang: \"en-US\",\n  textData: LanguageData[\"en-US\"],\n  switchLang(languageName: SuppportedLanguagesIntialsType | SuppportedLanguagesFullNameType) {\n      // Can retrieve name based on inputing the initial or full language name\n      const index = SuppportedLanguages.findIndex(l => languageName === l.initial || languageName === l.full);\n      this.currentLang = SuppportedLanguages[index].initial;\n      this.textData = LanguageData[this.currentLang];\n    \n    \n      localStorage.setItem(STORAGEKEY.languageKey, this.currentLang);\n  },\n  setLocalLang() {\n    let localLanguage;\n    localLanguage = localStorage.getItem(STORAGEKEY.languageKey);\n\n      if(localLanguage == null) {\n        localLanguage = navigator.language;\n        if(localLanguage != null && localLanguage.length > 3) {\n          localLanguage = localLanguage.replace('_','-');\n        }\n      };\n\n      if(SuppportedLanguages.find(lang => localLanguage === lang.initial)) {\n        const index = SuppportedLanguages.findIndex(l => localLanguage === l.initial);\n        this.currentLang = SuppportedLanguages[index].initial;\n       }\n       else {\n        this.currentLang = SuppportedLanguages[0].initial;\n      }\n  },\n  getSupportedLangs() {\n    return SuppportedLanguages;\n  }\n\n\n}\n\nconst createLanguageStore = () => {\n  const store = {\n    ...LanguageStore\n  };\n\n  return store;\n};\n\nexport type LanguageStoreType = ReturnType<typeof createLanguageStore>;\n\n\nexport default createLanguageStore;\n\n\n","import React from 'react';\nimport {ILanguageStore} from '../stores/Language/LanguageStore';\n\nconst LanguageContext = React.createContext<ILanguageStore | null> (null);\nexport default LanguageContext;","import React from 'react';\nimport  createLanguageStore  from '../stores/Language/LanguageStore';\nimport LanguageContext from '../context/LanguageContext';\nimport { useLocalStore} from 'mobx-react';\n\n\n\n\nexport interface ILanguageProvider {\n  children?: React.ReactNode | any; \n}\n\nexport const LanguageProvider: React.FC<ILanguageProvider> = ({children}) => { \n  const languageStore = useLocalStore(createLanguageStore);\n  languageStore.setLocalLang();\n\n  return  (\n    <LanguageContext.Provider value={languageStore}>\n          {children}\n    </LanguageContext.Provider>\n  \n  )\n}\n\nexport default LanguageProvider;","import React from 'react';\nimport LanguageContext from '../context/LanguageContext';\nimport { useObserver } from 'mobx-react';\n\nconst useLanguageStore = () => {\n    const context = React.useContext(LanguageContext);\n     if(!context) {\n       throw Error(\"Cannot be null\");\n     } \n     return useObserver(() => {\n        return context;\n      });\n}\n\nexport default useLanguageStore;","import React from 'react';\nimport { useObserver } from 'mobx-react';\nimport {Link} from \"react-router-dom\";\nimport { AVButton } from '../../components/Button/AVButton';\nimport PATH from '../../constants/pathData';\nimport { useAuthenticationStore } from '../../state/stores/Authentication';\nimport { useThemeStore } from '../../state/stores/Theme';\nimport { useLanguageStore } from '../../state/stores/Language';\ninterface Props  {\n  \n}\n\n\n\nconst  HomePage: React.FC<Props> = (props) => { \n  const authentication = useAuthenticationStore();\n  const theme = useThemeStore();\n  const language = useLanguageStore();\n\n  const themeTest1 = () => {\n    theme.toggleTheme();\n  }\n\n  const themeTest2 = () => {\n    theme.toggleLayout();\n  }\n\n  const languageTest1 = () => {\n    if(language.currentLang === 'en-US') {\n      language.switchLang('es-ES');\n    } else if(language.currentLang === 'es-ES') {\n      language.switchLang('nl-NL');\n    } else {\n      language.switchLang('en-US');\n    }\n    \n  }\n\n  const authenticationTest1 = () => {\n    authentication.logInFacebook();\n  }\n\n  const authenticationTest2 = () => {\n    authentication.logInGoogle();\n  }\n\n  const authenticationTest3 = () => {\n    authentication.logOut();\n  }\n  return useObserver(() => {   \n     return <div>\n                <Link to={PATH.Landing}>Splash</Link>\n                <AVButton type='primary' btnSize='large' title={theme.theme} onClick={themeTest1}> </AVButton>\n                <AVButton type='primary' btnSize='small' title={theme.layout} onClick={themeTest2}> </AVButton>\n                <AVButton type='primary' btnSize='medium' title={language.textData.test.test} onClick={languageTest1}> </AVButton>\n                <AVButton type='secondary' btnSize='large' title='facebook' onClick={authenticationTest1}> </AVButton>\n                <AVButton type='secondary' btnSize='small' title='google' onClick={authenticationTest2}> </AVButton>\n                <AVButton type='secondary' btnSize='medium' title= {String(authentication.loggedIn)} onClick={authenticationTest3}> </AVButton>\n            </div>\n    });\n  \n  }\n\n  HomePage.defaultProps = {\n    \n  };\n\n  export default HomePage;","import React from 'react';\nimport { useObserver } from 'mobx-react';\nimport {Link} from \"react-router-dom\";\nimport { AVButton } from '../../components/Button/AVButton';\nimport PATH from '../../constants/pathData';\nimport { useAuthenticationStore } from '../../state/stores/Authentication';\nimport { useThemeStore } from '../../state/stores/Theme';\nimport { useLanguageStore } from '../../state/stores/Language';\ninterface Props  {\n  \n}\n\n\n\nconst  LandingPage: React.FC<Props> = (props) => { \n  const authentication = useAuthenticationStore();\n  const theme = useThemeStore();\n  const language = useLanguageStore();\n\n  const themeTest1 = () => {\n    theme.toggleTheme();\n  }\n\n  const themeTest2 = () => {\n    theme.toggleLayout();\n  }\n\n  const languageTest1 = () => {\n    if(language.currentLang === 'en-US') {\n      language.switchLang('es-ES');\n    } else if(language.currentLang === 'es-ES') {\n      language.switchLang('nl-NL');\n    } else {\n      language.switchLang('en-US');\n    }\n    \n  }\n\n  const authenticationTest1 = () => {\n    authentication.logInFacebook();\n  }\n\n  const authenticationTest2 = () => {\n    authentication.logInGoogle();\n  }\n\n  const authenticationTest3 = () => {\n    authentication.logOut();\n  }\n\n  return useObserver(() => {   \n     return <div>\n        <Link to={PATH.Home}>Home</Link>\n                <Link to={PATH.Landing}>Splash</Link>\n                <AVButton type='primary' btnSize='large' title={theme.theme} onClick={themeTest1}> </AVButton>\n                <AVButton type='primary' btnSize='small' title={theme.layout} onClick={themeTest2}> </AVButton>\n                <AVButton type='primary' btnSize='medium' title={language.textData.test.test} onClick={languageTest1}> </AVButton>\n                <AVButton type='secondary' btnSize='large' title='facebook' onClick={authenticationTest1}> </AVButton>\n                <AVButton type='secondary' btnSize='small' title='google' onClick={authenticationTest2}> </AVButton>\n                <AVButton type='secondary' btnSize='medium' title= {String(authentication.loggedIn)} onClick={authenticationTest3}> </AVButton>\n          \n            </div>\n\n    });\n  \n  }\n\n  LandingPage.defaultProps = {\n    \n  };\n\n  export default LandingPage;","import React from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport {useAuthenticationStore} from '../../state/stores/Authentication/index';\nimport { useObserver } from 'mobx-react';\nimport PATH from '../../constants/pathData';\n\ninterface Props {\n    path: string | undefined;\n    children: React.ReactNode | any; \n}\n\nconst AuthenticatedRoute: React.FC<Props> = ({ path, children }) => { \n    const authStore = useAuthenticationStore();\n    const p = path ? path! : PATH.Landing;\n    return useObserver(() => { \n        if(authStore.loggedIn) {\n            return  <Route  path={p}> {children}   </Route>\n        }  \n        else {\n            return <Redirect to={{ pathname: PATH.Landing }} />\n        }\n       });\n}\n\nexport default AuthenticatedRoute;\n  ","import React, { useEffect } from 'react';\nimport { useObserver } from 'mobx-react';\nimport HomePage from './Home/HomePage';\nimport { Switch, Route, useHistory} from \"react-router-dom\";\nimport LandingPage from './Landing/LandingPage';\nimport {useAuthenticationStore} from '../state/stores/Authentication/index';\nimport AuthenticatedRoute from '../components/AuthenticatedRoute/AuthenticatedRoute';\nimport {PATH} from '../constants/pathData';\n\ninterface Props  {\n\n}\n\n\nconst  MainPage: React.FC<Props> = (props) => { \n  const authStore = useAuthenticationStore();\n  const history = useHistory();\n  useEffect(() => {\n    if(!authStore.loggedIn) {\n      history.push(PATH.Landing);\n    }\n  }, [authStore.loggedIn, history]);\n  \n  return useObserver(() => {   \n     return  <div>\n                <Switch>\n                    <AuthenticatedRoute path={PATH.Home}>\n                      <HomePage/>\n                    </AuthenticatedRoute>\n                    <Route path={PATH.Landing}>\n                      <LandingPage/>\n                    </Route>\n                </Switch>\n              </div>\n    });\n  }\n\n  export default MainPage;","import React from 'react';\nimport './App.css';\nimport {ThemeToggleProvider} from './state/providers/ThemeProvider';\nimport MainPage from './pages/MainPage';\nimport AuthenticationProvider from './state/providers/AuthenticationProvider';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { LanguageProvider } from './state/stores/Language/index';\n\n\n\nconst App: React.FC = () => {\n  return (\n    <ThemeToggleProvider>\n      <AuthenticationProvider>\n        <LanguageProvider>\n          <Router>\n            <MainPage/>\n          </Router>\n        </LanguageProvider>\n      </AuthenticationProvider>   \n    </ThemeToggleProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}